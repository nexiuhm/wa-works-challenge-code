{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Erlend\\\\Desktop\\\\thechall\\\\wa-works-challenge-code\\\\src\\\\App.tsx\",\n    _s = $RefreshSig$();\n\n/** @jsxRuntime classic */\n\n/** @jsx jsx */\nimport { jsx } from '@emotion/react';\nimport React from 'react';\nimport SortTable from \"./components/SortTable\";\nimport useCompositeFilter from \"./hooks/CompositeFilter\";\nimport Dropdown from \"./components/DropdownFilter\";\nimport './App.css';\nimport getMovieBySearch from './Api';\nimport Popup from \"./components/Popup\";\nimport MovieDetails from \"./components/MovieDetails\";\nimport BlurContainer from \"./components/blurContainer\";\nconst spaceThemedMovies = [\"interstellar\", \"alien\", \"2001: A Space Odyssey\", \"Gravity\", \"Star Wars\", \"Europa Report\", \"Moon\", \"Sunshine\", \"Apollo 13\", \"Contact\", \"The Martian\", \"Event Horizon\", \"Elysium\", \"Avatar\", \"Pitch Black\"];\nexport default function App() {\n  _s();\n\n  /* Init */\n  const [movieData, setMovieData] = React.useState([]);\n  const [filteredMovies, setFilteredMovies] = React.useState([]);\n  const {\n    filteredData,\n    addFilter,\n    removeFilter\n  } = useCompositeFilter(movieData);\n  const [selectedMovie, setSelectedMovie] = React.useState();\n  React.useEffect(() => {\n    spaceThemedMovies.forEach(title => {\n      getMovieBySearch(title).then(({\n        Title,\n        Year,\n        Metascore,\n        Rated,\n        Runtime,\n        Poster,\n        Plot,\n        imdbRating\n      }) => {\n        setMovieData(movieData => [...movieData, {\n          Title: Title,\n          Year: Year,\n          Metascore: Metascore,\n          imdbRating: imdbRating,\n          Runtime: Runtime,\n          Poster: Poster,\n          Plot: Plot\n        }]);\n      });\n    });\n  }, []);\n  React.useEffect(() => {\n    setFilteredMovies(filteredData);\n  }, [filteredData]);\n  React.useEffect(() => {\n    setFilteredMovies(movieData);\n  }, [movieData]);\n  return jsx(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 5\n    }\n  }, jsx(BlurContainer, {\n    blur: selectedMovie ? true : false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }\n  }, jsx(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 9\n    }\n  }, \"SPACE THEMED MOVIES\"), jsx(Dropdown, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }\n  }, jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 11\n    }\n  }, jsx(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }\n  }, jsx(\"input\", {\n    type: \"checkbox\",\n    onChange: e => e.target.checked ? addFilter(\"<year2k\", m => parseInt(m.Year) < 2000) : removeFilter(\"<year2k\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 20\n    }\n  }), \" Before year 2000\"), jsx(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }\n  }, jsx(\"input\", {\n    type: \"checkbox\",\n    onChange: e => e.target.checked ? addFilter(\">7.7imdb\", m => m.imdbRating > 7.5) : removeFilter(\">7.7imdb\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 20\n    }\n  }), \" High rated imdb\"))), filteredMovies && jsx(SortTable, {\n    onItemSelected: movie => {\n      setSelectedMovie(movie);\n    },\n    columnLabels: [\"Title\", \"Year\", \"Metascore\", \"imdbRating\", \"Runtime\"],\n    data: filteredMovies,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 11\n    }\n  })), selectedMovie && jsx(Popup, {\n    onClose: () => {\n      setSelectedMovie(undefined);\n    },\n    visible: selectedMovie ? true : false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 9\n    }\n  }, jsx(MovieDetails, {\n    movie: selectedMovie,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 11\n    }\n  })));\n}\n\n_s(App, \"074n7ohNz+lwRaxnJVqXcCLhhEU=\", false, function () {\n  return [useCompositeFilter];\n});\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/Erlend/Desktop/thechall/wa-works-challenge-code/src/App.tsx"],"names":["jsx","React","SortTable","useCompositeFilter","Dropdown","getMovieBySearch","Popup","MovieDetails","BlurContainer","spaceThemedMovies","App","movieData","setMovieData","useState","filteredMovies","setFilteredMovies","filteredData","addFilter","removeFilter","selectedMovie","setSelectedMovie","useEffect","forEach","title","then","Title","Year","Metascore","Rated","Runtime","Poster","Plot","imdbRating","e","target","checked","m","parseInt","movie","undefined"],"mappings":"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","sourcesContent":["/** @jsxRuntime classic */\n/** @jsx jsx */\n\nimport { css, jsx } from '@emotion/react'\nimport React from 'react';\nimport SortTable from \"./components/SortTable\";\nimport useCompositeFilter from \"./hooks/CompositeFilter\";\nimport Dropdown from \"./components/DropdownFilter\"\nimport './App.css';\nimport getMovieBySearch from './Api';\nimport Popup from \"./components/Popup\"\nimport MovieDetails from \"./components/MovieDetails\"\nimport BlurContainer from \"./components/blurContainer\"\nimport { bodyBase,appBase } from './styles/Styles';\n\n\nconst spaceThemedMovies = [\"interstellar\", \"alien\", \"2001: A Space Odyssey\", \"Gravity\", \"Star Wars\", \"Europa Report\", \"Moon\", \"Sunshine\", \"Apollo 13\", \"Contact\", \"The Martian\", \"Event Horizon\", \"Elysium\", \"Avatar\", \"Pitch Black\"];\n\n\n\nexport type MovieData = {\n  Title: string,\n  Year: string,\n  Metascore: string,\n  imdbRating: number,\n  Runtime: string,\n  Poster: string,\n  Plot: string,\n}\n\n\n\nexport default function App() {\n\n  /* Init */\n  const [movieData, setMovieData] = React.useState<MovieData[]>([]);\n  const [filteredMovies, setFilteredMovies] = React.useState<MovieData[] | null>([]);\n  const {filteredData, addFilter, removeFilter} = useCompositeFilter<MovieData>(movieData)\n  const [selectedMovie, setSelectedMovie] = React.useState<MovieData>()\n\n\n\n  React.useEffect(() => {\n\n    spaceThemedMovies.forEach((title: string) => {\n      getMovieBySearch(title).then(({ Title, Year, Metascore, Rated, Runtime, Poster, Plot, imdbRating }) => {\n        setMovieData((movieData) => [...movieData, { Title: Title, Year: Year, Metascore: Metascore, imdbRating: imdbRating, Runtime: Runtime, Poster: Poster, Plot: Plot }])\n      })\n\n    })\n\n  }, [])\n\n  React.useEffect(() => {\n    setFilteredMovies(filteredData);\n  }, [filteredData])\n\n\n  React.useEffect(() => {\n    setFilteredMovies(movieData)\n  }, [movieData])\n\n\n  return (\n    <div className=\"App\"> \n     \n      <BlurContainer blur={selectedMovie ? true : false}>\n\n\n        <h1>SPACE THEMED MOVIES</h1>\n\n\n        { /* ---- Dropdown   --------------------------------------------------- */}\n        <Dropdown>\n          <div>\n            <label><input type=\"checkbox\" onChange={(e)=>e.target.checked ? addFilter(\"<year2k\", (m: MovieData) => parseInt(m.Year) < 2000) : removeFilter(\"<year2k\")} /> Before year 2000</label>\n            <label><input type=\"checkbox\" onChange={(e)=>e.target.checked ? addFilter(\">7.7imdb\", (m: MovieData) => m.imdbRating > 7.5) : removeFilter(\">7.7imdb\")} /> High rated imdb</label>\n\n          </div>\n        </Dropdown>\n\n        { /* ---- Table ----------------------------------------- */}\n\n        {filteredMovies &&\n          <SortTable\n            onItemSelected={(movie: MovieData) => { setSelectedMovie(movie) }}\n            columnLabels={[\"Title\", \"Year\", \"Metascore\", \"imdbRating\", \"Runtime\"]}\n            data={filteredMovies}\n          />}\n\n      </BlurContainer>\n\n\n\n      { /* ----- Popup----------------------------------------  */}\n\n      {selectedMovie &&\n        <Popup onClose={() => { setSelectedMovie(undefined); }} visible={selectedMovie ? true : false}>\n          <MovieDetails movie={selectedMovie}></MovieDetails>\n        </Popup>}\n\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}